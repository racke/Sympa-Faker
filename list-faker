#! /usr/bin/env perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/lib";

use Data::Faker;
use Data::Faker::Sympa::ListDescription;
use Data::Faker::Sympa::ListTopic;
use Data::Faker::Sympa::ListType;
use Data::Faker::Sympa::OwnerEmail;

use Getopt::Long;
use XML::Hash::XS;

# Command line options
my $whandler = $SIG{__WARN__};
$SIG{__WARN__} = sub {print STDERR "$0: @_";};

my %overrides;

unless (GetOptions (
    \%overrides,
    'description|d=s',
    'name|n=s',
    'status|s=s',
    'topic|c=s',
    'type|t=s',
)) {
	exit 1;
}

$SIG{__WARN__} = $whandler;

my $fake = Data::Faker->new;

random_xml($fake, \%overrides);

sub random_xml {
    my ($fake, $overrides) = @_;

    # build the struct
    my $new_list = {
        listname => [lc($fake->first_name)],
        subject => [$fake->name],
        description => [$fake->sympa_list_description],
        type => [$fake->sympa_list_type],
        topics => [$fake->sympa_list_topic],
        owner => {multiple => 1, email => [$fake->sympa_owner_email]},
     #   multiple => 1,
     #   owner => { content => 'foo', multiple => 1}, #, {email => $fake->sympa_owner_email }},
    };

    while (my ($name, $value) = each %$overrides) {
        $new_list->{$name} = [$value];
    }

    print hash2xml(
        $new_list,
        root => 'list',
        use_attr => 1,
        indent => 2,
        content => 'content',
    ), "\n";
}
